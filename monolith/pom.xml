<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>j7-10</artifactId>
		<groupId>ru.gb.antonov</groupId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>monolith</artifactId>

	<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>	<!-- Библиотека для генерации кода: геттеры, сеттеры, конструкторы и др. -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>	<!-- для организации автоматических проверок параметров методов -->
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.1.5.Final</version>
		</dependency>
		<dependency>	<!-- Позволяет упростить работу с хибер-том на уровне Спринга. См.также YAML-файл. -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>	<!-- для организации авторизации при пом.(чего?) -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<!-- Также автоматически конфигурирет умолчального пользователя user; его (одноразовый?) пароль создаётся генериться при старте приложения.  -->
		</dependency>
		<dependency>	<!-- поддержка jdbc-драйвера H2 ("H2 Database Engine"). См.также YAML-файл. -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>	<!-- Помогает собирать и парсить JWT. -->
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
		<dependency>	<!-- Система миграции. Позволит указывать, какое наполнение базы данных нам может пригодиться. В ресурсах нужна папка db\migration (не db.migration). -->
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
	<!-- Для использования следующих двух зависимостей требуется установка Redis'а (Linux only)
		 или Memorai (аналог Redis'а для Windows). -->
		<dependency>	<!-- Аналог Spring data под кэшь Radis'а. -->
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
		</dependency>
		<!-- + -->
		<dependency>	<!-- Библиотека для установления соединения с Redis. -->
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>3.6.0</version>
		</dependency>
<!-- Следующие 5 зависимости нужны для SOAP. -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
			<version>1.6.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/jaxb2-maven-plugin -->
		<dependency>	<!-- Без этого jaxb2-плагин не устанавливался. -->
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>jaxb2-maven-plugin</artifactId>
			<version>2.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
							<!-- генератор классов из XSD-схем. Если тупая сука не запускается, ссылаясь на то, что XSD-файл не был изменён с момента последнего запуска задачи, то нужно изменить XSD-файл, сохранить его, отменить изменение и снова сохранить. Наверное, говно-авторы этого маразма так и хотели, — чтобы юзер корячился из-за каждой мелочи. -->
						</goals>
					</execution>
				</executions>
				<configuration>

					<sources>
						<source>${project.basedir}/src/main/resources/xsd/product.xsd</source><!--  -->
					</sources>
<!-- packageName	- пакет, который будет указан во всех сгенерированных java-файлах. Софтина также создаст такой пакет в папке <outputDirectory>. Этот параметр можно указывать, можно не указывать, — в любом случае результат вас не порадует.
	 outputDirectory	- папка, в которой будет создан пакет <packageName>. Эту же папку софтина почистит, если вы забыли указать false в <clearOutputDir>. (Какому дебилу пришла в голову идея, что какую-то папку проекта по умолчанию нужно очищать?!! ) -->
					<packageName>temp</packageName>
					<outputDirectory>${project.basedir}/src/main/java/ru/gb/antonov/j710/monolith/beans/soap</outputDirectory>
					<clearOutputDir>false</clearOutputDir>

				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
<!-- ru.gb.antonov.j710.monolith -->